<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddROM.Content" xml:space="preserve">
    <value>Add ROM</value>
  </data>
  <data name="CheatInstruction.Text" xml:space="preserve">
    <value>This emulator supports Gameshark, CodeBreaker and GameGenie codes.</value>
  </data>
  <data name="CHEATS.Text" xml:space="preserve">
    <value>CHEATS</value>
  </data>
  <data name="Code.Text" xml:space="preserve">
    <value>Code:</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="Load.Label" xml:space="preserve">
    <value>Load</value>
  </data>
  <data name="NoCheat.Text" xml:space="preserve">
    <value>No cheat code has been entered.</value>
  </data>
  <data name="Reset.Label" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Save.Label" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SelectState.Label" xml:space="preserve">
    <value>Select State</value>
  </data>
  <data name="StartARom.Text" xml:space="preserve">
    <value>Please start a rom first.</value>
  </data>
  <data name="AddBtn.Content" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="List.Text" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="CloseBtn.Content" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="EXPORT.Text" xml:space="preserve">
    <value>EXPORT</value>
  </data>
  <data name="ExportBtn.Content" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExportLocalInstruction.Text" xml:space="preserve">
    <value>If you import the rom using local storage option, then all save files are stored in the same folder as the rom; you just need to go there and copy them to wherever you need. Better yet, if you are on Desktop/Tablet and store the rom in OneDrive folder, all your saves are automatically synced to the cloud.</value>
  </data>
  <data name="ExportOneDriveInstruction.Text" xml:space="preserve">
    <value>If for any reason you cannot access the rom folder, e.g., the rom is stored in the app's private storage, use this option to export save files to OneDrive.</value>
  </data>
  <data name="HELP.Text" xml:space="preserve">
    <value>HELP</value>
  </data>
  <data name="HowTo.Header" xml:space="preserve">
    <value>How to</value>
  </data>
  <data name="Loading.Text" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="LocalStorage.Text" xml:space="preserve">
    <value>Local storage</value>
  </data>
  <data name="SignInBtn.Content" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="CheatsText" xml:space="preserve">
    <value>Cheats</value>
  </data>
  <data name="Contact.Text" xml:space="preserve">
    <value>Contact: </value>
  </data>
  <data name="Down.Text" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="EmptyCheatCodeError" xml:space="preserve">
    <value>You must enter a cheat code first.</value>
  </data>
  <data name="ErrorText" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExportFolderError" xml:space="preserve">
    <value>Could not find export folder.</value>
  </data>
  <data name="ExportText" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="FileNotSupportedError" xml:space="preserve">
    <value>This file type is not supported.</value>
  </data>
  <data name="HelpText" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HIDGamepadConfig.Text" xml:space="preserve">
    <value>HID Gamepad Config</value>
  </data>
  <data name="HomeText" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="HowToRestoreSave.Text" xml:space="preserve">
    <value>How to restore saves</value>
  </data>
  <data name="ImportedSuccessText" xml:space="preserve">
    <value>was imported successfully.</value>
  </data>
  <data name="ImportText" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="InvalidCheatCodeError" xml:space="preserve">
    <value>Invalid code format.</value>
  </data>
  <data name="Left.Text" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="NetworkErrorText" xml:space="preserve">
    <value>Network error.</value>
  </data>
  <data name="NoMatchingROMError" xml:space="preserve">
    <value>Could not find a matching ROM name.</value>
  </data>
  <data name="PleaseWaitDownloadText" xml:space="preserve">
    <value>Please wait until all files have finished downloading.</value>
  </data>
  <data name="PurchaseText" xml:space="preserve">
    <value>Purchase</value>
  </data>
  <data name="RestoreSaveInstruction.Text" xml:space="preserve">
    <value>1. Quit the app completelely.
2. Make sure the name of the save file match the name  of the rom exactly (except the extension).
3. Open the app and import the save file.
4. Start the game.</value>
  </data>
  <data name="Right.Text" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="Select.Text" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="SelectFileExportText" xml:space="preserve">
    <value>Select file(s) to export</value>
  </data>
  <data name="SelectROMText" xml:space="preserve">
    <value>SelectROM</value>
  </data>
  <data name="SettingsText" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SignedInText" xml:space="preserve">
    <value>Signed in</value>
  </data>
  <data name="SignInText" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="Start.Text" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="Turbo.Text" xml:space="preserve">
    <value>Turbo</value>
  </data>
  <data name="Up.Text" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="UploadSuccessText" xml:space="preserve">
    <value>Upload completed successfully.</value>
  </data>
  <data name="VersionText" xml:space="preserve">
    <value>Version: </value>
  </data>
  <data name="AxisText" xml:space="preserve">
    <value>Axis</value>
  </data>
  <data name="ButtonText" xml:space="preserve">
    <value>Button</value>
  </data>
  <data name="DeviceConnectionFailText" xml:space="preserve">
    <value>Error, device connection failed.</value>
  </data>
  <data name="DpadDownText" xml:space="preserve">
    <value>D-pad Down</value>
  </data>
  <data name="DpadLeftText" xml:space="preserve">
    <value>D-pad Left</value>
  </data>
  <data name="DpadNote" xml:space="preserve">
    <value>NOTE: the D-pad can only be used for direction and cannot be assigned to other functions.</value>
  </data>
  <data name="DpadRightText" xml:space="preserve">
    <value>D-pad Right</value>
  </data>
  <data name="DpadUpText" xml:space="preserve">
    <value>D-pad Up</value>
  </data>
  <data name="HIDConfigInstruction" xml:space="preserve">
    <value>You can now assign buttons as you wish. Up to two buttons can be assigned for each function.</value>
  </data>
  <data name="IMPORT.Text" xml:space="preserve">
    <value>IMPORT</value>
  </data>
  <data name="ImportLocalInstruction.Text" xml:space="preserve">
    <value>Use this option to import a file already present on your phone or PC. NOTE: due to a bug in Windows 10, you won't be able to see the content of the folder you are browsing. Just select the folder containing the rom and will be presented with a list of rom to import.</value>
  </data>
  <data name="PressStartPrompt" xml:space="preserve">
    <value>First press Start button.</value>
  </data>
</root>